=========================
主なフレームワークの概説
=========================

フレームワークは、共有ライブラリ、ライブラリに格納されているコードにアクセスするためのヘッダファイル、画像や音声ファイル等の他のリソースを含んだディレクトリです。
共有ライブラリは、アプリケーションが呼び出すことができる関数やメソッドを定義しています。

OS Xはアプリケーション開発で使用することができる多くのフレームワークを提供しています。
フレームワークを使うためには、アプリケーションがリンクできるようにプロジェクトに追加します。
ほとんどのアプリケーションは、「Foundation」「AppKit」「Core Graphics」フレームワークをリンクしています。
アプリケーションを作成するために、どのテンプレートを選択したかによって、ほかのフレームワークも含まれるかもしれません。
フレームワークのコアセットがアプリケーションのニーズを満たしていない場合は、いつでも追加のフレームワークを追加することができます。


----------

**TrackMix.xcodeprojに含まれているフレームワークを見てみよう**

1. （開いていなければ）「TrackMix.xcodeproj」をXcodeで開きます。このプロジェクトは「Your First Mac App」チュートリアルで作成したものです。

2. その横にある、開閉三角ボタンをクリックして、プロジェクトナビゲータで「Frameworks」フォルダを開きます。

3. その横にある、開閉三角ボタンをクリックして、「Other Frameworks」フォルダを開きます。

	「AppKit.framework」「CoreData.framework」「Foundation.framework」があるはずです。このプロジェクトでは「Core Data」を使用しませんでしたが、これらの３つのフレームワークは、Umbrella Cocoa Frameworkの一部として含まれています。

4. フレームワークの横にある、開閉三角ボタンをクリックしてフレームワークを開き、それから、「Headers」フォルダの横にある、三角ボタンをクリックすることでヘッダファイルを見ることができます。

----------

各フレームワークはOS Xシステムのレイヤーに対応しています。各レイヤはその下ににあるものに基づいています。
可能な限り、下位レベルのフレームワークよりも上位レベルのフレームワークを使用してください。
これらの抽象化は通常、あなた書くべきコードの量を減らしてくれます。

	.. image:: images/frameworks_layer.png

OS XのアプリはFoundationとAppKitフレームワークに基づいている
===============================================================

プログラミングを始めるとき、アプリケーション開発に必要なものをほとんどカバーしているので、「Foundation」と「AppKit」フレームワークを主に使うことになります。

Foundationフレームワークはすべてのアプリの基本的なシステムのサービスを提供している
------------------------------------------------------------------------------------

あなたのアプリは、AppKitや他のフレームワークと同様に、Foundaiontフレームワークの基盤の上に構築されています。
Foundationフレームワークは多くの最初のオブジェクトクラスとデータ型を提供し、アプリケーション開発の基礎となります。
また、コードをより一貫性があり再利用可能にする規則（割り当て解除のようなタスクのための）を確立します。

次のようなときにFoundationを使用します

	- ArrayやDictionaryのようなCollectionを作成、管理する
	- 文字列を作成、管理する
	- アプリケーションに格納されている、画像や他のリソースにアクセスする
	- 通知をポスト、監視する
	- 日付と時刻のオブジェクトを作成する
	- IPネットワーク上のデバイスを自動的に発見する
	- URLストリームを操作する
	- 非同期にコードを実行する


AppKitフレームワークはグラフィカルなイベント駆動型のユーザーインターフェースを提供する
---------------------------------------------------------------------------------------

すべてのMacアプリケーションは「AppKit」に基づいています。
このフレームワークなしに、アプリケーションを出荷することはできません。
「AppKit」は、画面の描画、イベントのハンドリング、共通のユーザーインターフェース要素の作成のための、基盤を提供します。
「AppKit」は、画面上に表示されているコンテンツを管理することで、複雑なアプリを形成しています。

次のようなときにAppKitを使用します

	- ユーザーインターフェースの構築と管理
	- ユーザーイベントの処理
	- フォント、色、画像の提供
	- 基本的なアニメーションの実行
	- スペース、ヘルプサポート、複数ユーザーのアカウントといったアプリケーションの基本的な機能のサポート
	- カスタムユーザーインターフェース要素の作成

あなたは、「Your First Mac App」で「AppKit」を使用しました。
「updateUserInterface」を呼び出すために、「NSApplicationDelegate」プロトコルを実装しました。
実際には、「NSTextField」と「NSSlider」クラスで全体のインターフェースを作成するために「AppKit」を使用しました。


知っておくべきその他の重要なフレームワーク
==============================================

「Core Data」「Core Graphics」「Core Animation」「OpenGL」フレームワークは、高度な技術です。
これらのフレームワークは、アプリケーション開発において重要ですが、これらを学習してマスターするためには時間が必要です。


Core Dataフレームワークはアプリケーションのデータモデルを管理する
---------------------------------------------------------------------

Core Dataはオブジェクトグラフの管理を提供しています。
Core Dataで、管理対象オブジェクトとして知られているモデルオブジェクトを作成します。
このフレームワークを介して、これらのオブジェクト間の関係を管理し、データを変更させます。
Core Dataは、データを効率よく保存、管理するために組込まれているSQLiteの技術を利用しています。

次のようなときにCore Dataを使用します

	- オブジェクトのストレージへの保存と、ストレージからの取り出し
	- 基本的なUndo/Redoのサポート
	- プロパティの値を自動的に検証する
	- メモリ内のデータを、フィルター、グループ化、整理する
	- 「NSFetchedResultsController」で、テーブルビューの結果を管理する
	- ドキュメントベースアプリのサポート

Core Graphicsフレームワークはグラフィックの生成を助けます
------------------------------------------------------------

高品質なグラフィックスはOS Xアプリの重要な部分です。
OS Xでグラフィックスを作成する、最も単純で最も効率的な方法は、AppKitフレームワークの標準のビューやコントロールでレンダリング済みの画像を使用し、OS Xに描画させることです。
AppKitは、パス、色、パターン、グラデーション、画像、文字、変換を含む、カスタム描画クラスを提供します。
可能な限り、下位レベルフレームワークのCore Dataに変わって、上位レベルのフレームワークであるAppKitを使用してください。

iOSとOS Xの間で直接共有する描画コードを書きたいときは、Core Graphicsを使用してください。
クォーツとしても知られているCoreGragphicsフレームワークは両方のプラットフォームでほぼ同じです。

次のようなときにCore Graphicsを使用します

	- パスベース描画をさせる
	- アンチエイリアスレンダリングを使用する
	- グラデーション、画像、色を追加する
	- 空間-座標の変換を使用する


Core Animationは高度なアニメーションやビジュアルエフェクトを可能にします
--------------------------------------------------------------------------

AppKitはCore Animation技術の上に構築されているアニメーションを提供しています。
もしも、AppKitの能力以上に高度なアニメーションが必要になったら、Core Animationを直接使用することができます。
Core Animationインターフェースは、Quartz Coreフレームワークに含まれています。
Core Animationで、回転、拡大縮小、変換などの操作をするオブジェクトの階層を作成します。
Core AnimationのおなじみのView的な抽象化を使用することで、OpenGLのような下位レベルのグラフィックAPIを使用することなく、動的なユーザーインターフェースを作成することができます。

次のようなときにCore Animationを使用します

	- カスタムアニメーションの作成
	- グラフィックスにタイミング機能を追加する
	- キーフレームアニメーションをサポートする
	- グラフィカルなレイアウト制約を指定
	- グループ化した複数レイヤをアトミックアップデートにする


OpenGLフレームワークは2D, 3D描画のツールを提供します
-------------------------------------------------------

高度な３次元（3D）グラフィックスアプリケーションを開発するためには、OpenGLを使用してください。
OpenGLは、２次元および３次元で会場を可視化するためにリッチで堅牢なフレームワークが必要な、ゲームのようなアプリケーションのために特別に設計されています。
Appleの標準のOpenGLの実装は、フルスクリーンのゲームスタイルアプリのために、高いフレームレートを提供するために、ハードウェアと密接に連携しています。

次のようなときにOpenGLを使用します

	- 2Dおよび3Dのグラフィックを作成する
	- データの視覚化、フライトシミュレーション、ビデオゲームのようなより複雑なグラpヒックを作成する
	- グラフィックスデータを処理するために複数のスレッドを使用する
	- 下層のグラフィックハードウェアにアクセスする


OS XとiOSの間の相違点と類似点を理解しよう
============================================

もしも、あなたがiOSの開発者であるならば、CocoaやCocoa Touchアプリケーションが同じような技術に基づいていることが分かるかと思います。
これらの共有APIにより、容易にCocoa Touchから移行することができます。
実際に、いくつかのフレームワークは「Foundation」や「Core Data」のように同じ（またはほとんど同じ）です。
しかしながら、ほかのフレームワークはiOSの同一機能のものとは異なります。
これは、「AppKit」と「UIKit」で特に当てはまります。
したがって、iOSアプリをOS Xに移行するとき、かなりの数のインターフェース関連のクラスとこのクラスに関連するコードを書き換える必要があります。

プラットフォーム間の相違点と類似点の詳細については、「Mac OS X Technology Overview」の「Migrating from Cocoa Touch」を見てください。


プロジェクトに必要なフレームワークを追加しよう
=================================================

アプリケーション内で使用できるフレームワークはたくさんあります。
まだ含まれていないフレームワークを使用する必要があると判断したとき、アプリケーションがリンクできるようにプロジェクトにフレームワークを追加してください。

	.. image:: images/Add_framework.png

-----------

**TrackMix.xcodeprojに他のフレームワークをリンクしてみよう**

1. XcodeでTrackMix.xcodeprojを開きます。（開いていなければ）

2. プロジェクトナビゲータのTrackMixプロジェクトを選択し、プロジェクトエディタを表示します

3. TargetリストのTrackMixをクリックして、フレームワークのリンクターゲットとしてTrackMixを指定してください

4. プロジェクトエディタ上部の「BuildPhase」選択してください

5. 開閉三角ボタンを押して、「Link Binary With Libraries」セクションを開いてください

.. Note:: Xcode5では「Linked Frameworks and Libraries」

6. Add（+）ボタンを押してフレームワークを追加してください

7. リストからフレームワークを選択して「Add」を押してください

-------------

フレームワークの完全なリストやそれらの詳細を学ぶためには、「Max OS X Technology Overview」を参照してください。





