=========================
ブロックオブジェクト
=========================

ブロックオブジェクトの定義
============================

.. code-block:: objective-c

	^( 引数列 ) { 本体 }

この「^」から弾き数列、本体の最後の括弧に至るまでのブロックオオブジェクトの記述を **ブロックリテラル** (block literal)と呼びます。

ブロックオブジェクト自体は、変数に代入しておいて後から評価したり、関数やメソッドに引数として渡すといった使い方をします。その場合の変数や仮引数の型の宣言は、関数へのポインタと同じような記法となります。
関数ポインタの宣言で「*」を使っている部分に、ブロックオブジェクトは「^」を使います。
たとえば、int型の引数を１つ取り、値を返さない関数へのポインタを格納する変数fの宣言は次のようになります。

.. code-block:: objective-c

	void (*f)(int);

同様に、int型の引数を１つとり、値を返さないブロックオブジェクトを作ることができますが、これを代入するための変数bを宣言すると次のようになります。

.. code-block:: objective-c

	void (^b)(int);

宣言と同時に、ブロックオブジェクトをbに代入するというコードは次のようになります。

.. code-block:: objective-c

	void (^b)(int) = ^( int i ) { printf("%d\n", i); };

関数プロタイプ宣言のように、仮引数名を記述しても構いません。

.. code-block:: objective-c

	void (^b)(int i) = ^( int i ) { printf("%d\n", i); };


ブロックオブジェクトと型宣言
================================

関数ポインタと同様に、型の記述をコンパクトにするためにtypedef宣言をすることができます。

例えば、int型の引数を１つとり、返り血がint型であるブロックオブジェクトの型にmyBlockTypeという名前を付ける場合は次用のように記述します。

.. code-block:: objective-c

	typedef int (^myBlockType)(int);

また、この型の要素を３つ持つ配列blocksを定義するには、次の①または②のように記述します。

.. code-block:: objective-c

	int (^blocks[3])(int); // ・・・ ①
	myBlockType blocks[3]; // ・・・ ②


ブロックオブジェクトに含まれる変数の振る舞い
=============================================

1. ブロックリテラルの本体には、ブロックリテラル自体のローカル変数と仮引数のほかに、そのブロックリテラルが記述された位置で参照可能な変数を含めることができます。そのような変数には、外部変数、そのブロックリテラルを含むブロック内で参照可能なローカル変数があります。

2. 外部変数、および静的変数(static変数)は、ブロックオブジェクトの内部からも変数自体に直接アクセスできます。ブロックオブジェクトの内部から変数の値を変更することもできます。

3. ブロックリテラルを含むブロック内で参照可能なローカル変数のうち、自動変数(スタック内の変数)は、ブロックリテラルが記述された時点での値が保存されていて、それが参照されます。

	(a)従って、元の変数の値が変化しても、ブロックオブジェクトの評価には反映されません。
	(b)また、変数の値は参照できますが変更はできません。
	(c)自動変数が配列だった場合、コンパイルエラーが発生します。


.. Note::

	ブロックオブジェクトには記述された位置でアクセス可能な変数を含めることができるものの、**自動変数はコピーされた値を読み込むことだけが可能** であるということになります。別の言い方をすると、自動変数は、実行時に型修飾子constが付けられた変数のように扱われます。


Objective-Cとブロックオブジェクト
====================================

ブロックオブジェクトをメソッドの引数として渡す場合の、引数の型の指定方法を見て行きます。
2つの整数を引数として、BOOL型の結果を返すブロックオブジェクトを考えます。

.. code-block:: objective-c

	BOOL (^block)(int, int) = ^(int index, int length) { ...; };

この型を持つブロックオブジェクトを引数とするメソッドsetBlock: の宣言は次のようになります。

.. code-block:: objective-c

	- (void) setBlock: (BOOL (^)(int, int)) block;

型の部分に仮引数を記述することもできます。長くなりますが、引数の役割が分かりやすくなります。

.. code-block:: objective-c

	- (void) setBlock: (BOOL (^)(int index, int length)) block;

メソッドの戻り値としてブロックオブジェクトが返される場合も同様です。

.. code-block:: objective-c

	- (BOOL (^)(int, int)) currentBlock;



